{
  "rules": {
    "posts": {
      ".read": true,
      ".indexOn": ["postedAt", "votesCount"],
      "$postId": {
        //post author has right to create, anyone can update (except validation below)
        ".write": "(auth.uid === newData.child('userId').val() && !data.exists()) || (auth !== null && data.exists())",
        ".validate": "newData.hasChildren(['votesCount', 'postedAt', 'userId', 'hero', 'youtubeId'])",
        "votesCount": {
          //need a number, equal to existing data +/- 1, only if adding or removing votes items
          ".validate": "(!data.exists() && newData.val() === 0) || (data.exists() && ( (newData.val() === data.val() + 1 && newData.parent().parent().parent().child('votes').child($postId).child(auth.uid).exists() && !data.parent().parent().parent().child('votes').child($postId).child(auth.uid).exists())  || (newData.val() === data.val() - 1 && !newData.parent().parent().parent().child('votes').child($postId).child(auth.uid).exists() && data.parent().parent().parent().child('votes').child($postId).child(auth.uid).exists()) ))"
        },
        "postedAt": {
          //only allows create
          ".validate": "newData.isNumber() && (!data.exists() && auth.uid === newData.parent().child('userId').val() && newData.val() === now)"
        },
        "userId": {
          //only allows create
          ".validate": "newData.isString() && (!data.exists() && auth.uid === newData.parent().child('userId').val())"
        },
        "youtubeId": {
          //only allows create
          ".validate": "newData.isString() && (!data.exists() && auth.uid === newData.parent().child('userId').val())"
        },
        "hero": {
          ".validate": "newData.isString() && ((data.exists() && root.child('posts').child($postId).child('userId').val() === auth.uid) || (!data.exists() && auth.uid === newData.parent().child('userId').val()) )"
        },
        "description": {
          ".validate": "newData.isString() && ((data.exists() && root.child('posts').child($postId).child('userId').val() === auth.uid) || (!data.exists() && auth.uid === newData.parent().child('userId').val()) )"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "votes": {
      ".read": true,
      "$postId": {
        // Check that the post exists
        ".validate": "root.child('posts').child($postId).exists()",
        "$uid": {
          ".write": "auth.uid === $uid",
          ".validate": "newData.val() === now"
        }
      }
    },
    "profile": {
      ".read": true,
      "$uid": {
        ".write": "auth.uid === $uid",
        "name": {
          ".validate": "newData.isString()"
        },
        "battletag": {
          ".validate": "newData.isString()"
        },
        "picture": {
          ".validate": "newData.isString()"
        },
        "onboarding": {
          ".validate": "newData.isBoolean()"
        },
        "posts": {
          "$postId": {
            ".validate": "newData.val() === true && newData.parent().parent().parent().parent().child('posts').child($postId).exists() && newData.parent().parent().parent().parent().child('posts').child($postId).child('userId').val() === $uid"
          }
        },
        "$other": {
          ".validate": false
        }
      }
    }
  }
}
